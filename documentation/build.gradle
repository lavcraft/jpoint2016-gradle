buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'org.asciidoctor:asciidoctorj:1.5.4'
  }
}

plugins {
  id 'org.asciidoctor.convert' version '1.5.3'
}

configurations {
  docs
}

apply plugin: 'org.asciidoctor.convert'


task tt(dependsOn: configurations.docs) {
  doLast {
    Map deps = new HashMap()

    configurations.docs.resolvedConfiguration.resolvedArtifacts.each {
      println it.getModuleVersion().getId()
      deps.put(it.getModuleVersion().getId(), it)
    }
  }
}

asciidoctorj {
  version = '1.5.4'
  groovyDslVersion = '1.0.0.Alpha1'
}

asciidoctor {
  List<String> docsSources = fileTree(dir: projectDir, include: '**/*.adoc')
      .toList() // hack for ruby. Prevent NoSuchMethodException exception
      .collect { relativePath(it) }
  dependsOn 'prepare'
  sourceDir project.projectDir

  sources {
    setIncludes docsSources
  }

  outputDir = new File("$buildDir/docs")
  attributes(['source-highlighter': 'coderay',
              doctype             : 'book',
              toc                 : 'left',
              idprefix            : '',
              idseparator         : '-'])

  afterEvaluate {
    org.asciidoctor.extension.DependencyIncludeProcessor.project = project
  }
}

dependencies {
  asciidoctor 'org.asciidoctor:asciidoctorj:1.5.4'
  docs project(path: ':service-with-deps', configuration: 'documentationConfiguration')
  docs 'org.slf4j:slf4j-api:1.7.2'
}

task copyDist(type: Copy) {
  into "$buildDir/docsArchive"
  from configurations.docs
}

task prepare(type: Copy) {
  dependsOn copyDist
  into "$buildDir/docsDependencies/"
  configurations.docs.files.each { archive ->
    into(archive.name) {
      from zipTree(archive)
    }
  }
}

task dist(type: Tar) {
  dependsOn 'asciidoctor'
  compression 'gzip'
  from file(asciidoctor.outputDir)
}

artifacts {
  documentationConfiguration dist
}
